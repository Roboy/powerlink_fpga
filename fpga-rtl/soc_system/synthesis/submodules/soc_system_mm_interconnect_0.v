// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2017.06.23.23:56:55

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire        clk50_clk_clk,                               //                             clk50_clk.clk
		input  wire        pcp_0_rst_clk50_reset_bridge_in_reset_reset, // pcp_0_rst_clk50_reset_bridge_in_reset.reset
		input  wire        sysid_reset_reset_bridge_in_reset_reset,     //     sysid_reset_reset_bridge_in_reset.reset
		input  wire [14:0] pcp_0_slow_bridge_address,                   //                     pcp_0_slow_bridge.address
		output wire        pcp_0_slow_bridge_waitrequest,               //                                      .waitrequest
		input  wire [0:0]  pcp_0_slow_bridge_burstcount,                //                                      .burstcount
		input  wire [3:0]  pcp_0_slow_bridge_byteenable,                //                                      .byteenable
		input  wire        pcp_0_slow_bridge_read,                      //                                      .read
		output wire [31:0] pcp_0_slow_bridge_readdata,                  //                                      .readdata
		output wire        pcp_0_slow_bridge_readdatavalid,             //                                      .readdatavalid
		input  wire        pcp_0_slow_bridge_write,                     //                                      .write
		input  wire [31:0] pcp_0_slow_bridge_writedata,                 //                                      .writedata
		input  wire        pcp_0_slow_bridge_debugaccess,               //                                      .debugaccess
		output wire [1:0]  app_pio_s1_address,                          //                            app_pio_s1.address
		output wire        app_pio_s1_write,                            //                                      .write
		input  wire [31:0] app_pio_s1_readdata,                         //                                      .readdata
		output wire [31:0] app_pio_s1_writedata,                        //                                      .writedata
		output wire        app_pio_s1_chipselect,                       //                                      .chipselect
		output wire [1:0]  node_switch_pio_s1_address,                  //                    node_switch_pio_s1.address
		input  wire [31:0] node_switch_pio_s1_readdata,                 //                                      .readdata
		output wire [11:0] openmac_0_macReg_address,                    //                      openmac_0_macReg.address
		output wire        openmac_0_macReg_write,                      //                                      .write
		output wire        openmac_0_macReg_read,                       //                                      .read
		input  wire [15:0] openmac_0_macReg_readdata,                   //                                      .readdata
		output wire [15:0] openmac_0_macReg_writedata,                  //                                      .writedata
		output wire [1:0]  openmac_0_macReg_byteenable,                 //                                      .byteenable
		input  wire        openmac_0_macReg_waitrequest,                //                                      .waitrequest
		output wire        openmac_0_macReg_chipselect,                 //                                      .chipselect
		output wire [2:0]  openmac_0_macTimer_address,                  //                    openmac_0_macTimer.address
		output wire        openmac_0_macTimer_write,                    //                                      .write
		output wire        openmac_0_macTimer_read,                     //                                      .read
		input  wire [31:0] openmac_0_macTimer_readdata,                 //                                      .readdata
		output wire [31:0] openmac_0_macTimer_writedata,                //                                      .writedata
		output wire [3:0]  openmac_0_macTimer_byteenable,               //                                      .byteenable
		input  wire        openmac_0_macTimer_waitrequest,              //                                      .waitrequest
		output wire        openmac_0_macTimer_chipselect,               //                                      .chipselect
		output wire [0:0]  sysid_control_slave_address,                 //                   sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata                 //                                      .readdata
	);

	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_waitrequest;   // pcp_0_slow_bridge_agent:av_waitrequest -> pcp_0_slow_bridge_translator:uav_waitrequest
	wire   [2:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_burstcount;    // pcp_0_slow_bridge_translator:uav_burstcount -> pcp_0_slow_bridge_agent:av_burstcount
	wire  [31:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_writedata;     // pcp_0_slow_bridge_translator:uav_writedata -> pcp_0_slow_bridge_agent:av_writedata
	wire  [14:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_address;       // pcp_0_slow_bridge_translator:uav_address -> pcp_0_slow_bridge_agent:av_address
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_lock;          // pcp_0_slow_bridge_translator:uav_lock -> pcp_0_slow_bridge_agent:av_lock
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_write;         // pcp_0_slow_bridge_translator:uav_write -> pcp_0_slow_bridge_agent:av_write
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_read;          // pcp_0_slow_bridge_translator:uav_read -> pcp_0_slow_bridge_agent:av_read
	wire  [31:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_readdata;      // pcp_0_slow_bridge_agent:av_readdata -> pcp_0_slow_bridge_translator:uav_readdata
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_debugaccess;   // pcp_0_slow_bridge_translator:uav_debugaccess -> pcp_0_slow_bridge_agent:av_debugaccess
	wire   [3:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_byteenable;    // pcp_0_slow_bridge_translator:uav_byteenable -> pcp_0_slow_bridge_agent:av_byteenable
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_readdatavalid; // pcp_0_slow_bridge_agent:av_readdatavalid -> pcp_0_slow_bridge_translator:uav_readdatavalid
	wire         sysid_control_slave_agent_m0_waitrequest;                             // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire   [2:0] sysid_control_slave_agent_m0_burstcount;                              // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire  [31:0] sysid_control_slave_agent_m0_writedata;                               // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire  [14:0] sysid_control_slave_agent_m0_address;                                 // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire         sysid_control_slave_agent_m0_write;                                   // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire         sysid_control_slave_agent_m0_lock;                                    // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire         sysid_control_slave_agent_m0_read;                                    // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire  [31:0] sysid_control_slave_agent_m0_readdata;                                // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire         sysid_control_slave_agent_m0_readdatavalid;                           // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire         sysid_control_slave_agent_m0_debugaccess;                             // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [3:0] sysid_control_slave_agent_m0_byteenable;                              // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire         sysid_control_slave_agent_rf_source_endofpacket;                      // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_control_slave_agent_rf_source_valid;                            // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire         sysid_control_slave_agent_rf_source_startofpacket;                    // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [89:0] sysid_control_slave_agent_rf_source_data;                             // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire         sysid_control_slave_agent_rf_source_ready;                            // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire         sysid_control_slave_agent_rsp_fifo_out_endofpacket;                   // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire         sysid_control_slave_agent_rsp_fifo_out_valid;                         // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire         sysid_control_slave_agent_rsp_fifo_out_startofpacket;                 // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire  [89:0] sysid_control_slave_agent_rsp_fifo_out_data;                          // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire         sysid_control_slave_agent_rsp_fifo_out_ready;                         // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_control_slave_agent_rdata_fifo_src_valid;                       // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                        // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire         sysid_control_slave_agent_rdata_fifo_src_ready;                       // sysid_control_slave_agent:rdata_fifo_sink_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> sysid_control_slave_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire  [88:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> sysid_control_slave_agent:cp_data
	wire   [4:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> sysid_control_slave_agent:cp_channel
	wire         cmd_mux_src_ready;                                                    // sysid_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire         node_switch_pio_s1_agent_m0_waitrequest;                              // node_switch_pio_s1_translator:uav_waitrequest -> node_switch_pio_s1_agent:m0_waitrequest
	wire   [2:0] node_switch_pio_s1_agent_m0_burstcount;                               // node_switch_pio_s1_agent:m0_burstcount -> node_switch_pio_s1_translator:uav_burstcount
	wire  [31:0] node_switch_pio_s1_agent_m0_writedata;                                // node_switch_pio_s1_agent:m0_writedata -> node_switch_pio_s1_translator:uav_writedata
	wire  [14:0] node_switch_pio_s1_agent_m0_address;                                  // node_switch_pio_s1_agent:m0_address -> node_switch_pio_s1_translator:uav_address
	wire         node_switch_pio_s1_agent_m0_write;                                    // node_switch_pio_s1_agent:m0_write -> node_switch_pio_s1_translator:uav_write
	wire         node_switch_pio_s1_agent_m0_lock;                                     // node_switch_pio_s1_agent:m0_lock -> node_switch_pio_s1_translator:uav_lock
	wire         node_switch_pio_s1_agent_m0_read;                                     // node_switch_pio_s1_agent:m0_read -> node_switch_pio_s1_translator:uav_read
	wire  [31:0] node_switch_pio_s1_agent_m0_readdata;                                 // node_switch_pio_s1_translator:uav_readdata -> node_switch_pio_s1_agent:m0_readdata
	wire         node_switch_pio_s1_agent_m0_readdatavalid;                            // node_switch_pio_s1_translator:uav_readdatavalid -> node_switch_pio_s1_agent:m0_readdatavalid
	wire         node_switch_pio_s1_agent_m0_debugaccess;                              // node_switch_pio_s1_agent:m0_debugaccess -> node_switch_pio_s1_translator:uav_debugaccess
	wire   [3:0] node_switch_pio_s1_agent_m0_byteenable;                               // node_switch_pio_s1_agent:m0_byteenable -> node_switch_pio_s1_translator:uav_byteenable
	wire         node_switch_pio_s1_agent_rf_source_endofpacket;                       // node_switch_pio_s1_agent:rf_source_endofpacket -> node_switch_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         node_switch_pio_s1_agent_rf_source_valid;                             // node_switch_pio_s1_agent:rf_source_valid -> node_switch_pio_s1_agent_rsp_fifo:in_valid
	wire         node_switch_pio_s1_agent_rf_source_startofpacket;                     // node_switch_pio_s1_agent:rf_source_startofpacket -> node_switch_pio_s1_agent_rsp_fifo:in_startofpacket
	wire  [89:0] node_switch_pio_s1_agent_rf_source_data;                              // node_switch_pio_s1_agent:rf_source_data -> node_switch_pio_s1_agent_rsp_fifo:in_data
	wire         node_switch_pio_s1_agent_rf_source_ready;                             // node_switch_pio_s1_agent_rsp_fifo:in_ready -> node_switch_pio_s1_agent:rf_source_ready
	wire         node_switch_pio_s1_agent_rsp_fifo_out_endofpacket;                    // node_switch_pio_s1_agent_rsp_fifo:out_endofpacket -> node_switch_pio_s1_agent:rf_sink_endofpacket
	wire         node_switch_pio_s1_agent_rsp_fifo_out_valid;                          // node_switch_pio_s1_agent_rsp_fifo:out_valid -> node_switch_pio_s1_agent:rf_sink_valid
	wire         node_switch_pio_s1_agent_rsp_fifo_out_startofpacket;                  // node_switch_pio_s1_agent_rsp_fifo:out_startofpacket -> node_switch_pio_s1_agent:rf_sink_startofpacket
	wire  [89:0] node_switch_pio_s1_agent_rsp_fifo_out_data;                           // node_switch_pio_s1_agent_rsp_fifo:out_data -> node_switch_pio_s1_agent:rf_sink_data
	wire         node_switch_pio_s1_agent_rsp_fifo_out_ready;                          // node_switch_pio_s1_agent:rf_sink_ready -> node_switch_pio_s1_agent_rsp_fifo:out_ready
	wire         node_switch_pio_s1_agent_rdata_fifo_src_valid;                        // node_switch_pio_s1_agent:rdata_fifo_src_valid -> node_switch_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] node_switch_pio_s1_agent_rdata_fifo_src_data;                         // node_switch_pio_s1_agent:rdata_fifo_src_data -> node_switch_pio_s1_agent:rdata_fifo_sink_data
	wire         node_switch_pio_s1_agent_rdata_fifo_src_ready;                        // node_switch_pio_s1_agent:rdata_fifo_sink_ready -> node_switch_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> node_switch_pio_s1_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> node_switch_pio_s1_agent:cp_valid
	wire         cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> node_switch_pio_s1_agent:cp_startofpacket
	wire  [88:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> node_switch_pio_s1_agent:cp_data
	wire   [4:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> node_switch_pio_s1_agent:cp_channel
	wire         cmd_mux_001_src_ready;                                                // node_switch_pio_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire         openmac_0_mactimer_agent_m0_waitrequest;                              // openmac_0_macTimer_translator:uav_waitrequest -> openmac_0_macTimer_agent:m0_waitrequest
	wire   [2:0] openmac_0_mactimer_agent_m0_burstcount;                               // openmac_0_macTimer_agent:m0_burstcount -> openmac_0_macTimer_translator:uav_burstcount
	wire  [31:0] openmac_0_mactimer_agent_m0_writedata;                                // openmac_0_macTimer_agent:m0_writedata -> openmac_0_macTimer_translator:uav_writedata
	wire  [14:0] openmac_0_mactimer_agent_m0_address;                                  // openmac_0_macTimer_agent:m0_address -> openmac_0_macTimer_translator:uav_address
	wire         openmac_0_mactimer_agent_m0_write;                                    // openmac_0_macTimer_agent:m0_write -> openmac_0_macTimer_translator:uav_write
	wire         openmac_0_mactimer_agent_m0_lock;                                     // openmac_0_macTimer_agent:m0_lock -> openmac_0_macTimer_translator:uav_lock
	wire         openmac_0_mactimer_agent_m0_read;                                     // openmac_0_macTimer_agent:m0_read -> openmac_0_macTimer_translator:uav_read
	wire  [31:0] openmac_0_mactimer_agent_m0_readdata;                                 // openmac_0_macTimer_translator:uav_readdata -> openmac_0_macTimer_agent:m0_readdata
	wire         openmac_0_mactimer_agent_m0_readdatavalid;                            // openmac_0_macTimer_translator:uav_readdatavalid -> openmac_0_macTimer_agent:m0_readdatavalid
	wire         openmac_0_mactimer_agent_m0_debugaccess;                              // openmac_0_macTimer_agent:m0_debugaccess -> openmac_0_macTimer_translator:uav_debugaccess
	wire   [3:0] openmac_0_mactimer_agent_m0_byteenable;                               // openmac_0_macTimer_agent:m0_byteenable -> openmac_0_macTimer_translator:uav_byteenable
	wire         openmac_0_mactimer_agent_rf_source_endofpacket;                       // openmac_0_macTimer_agent:rf_source_endofpacket -> openmac_0_macTimer_agent_rsp_fifo:in_endofpacket
	wire         openmac_0_mactimer_agent_rf_source_valid;                             // openmac_0_macTimer_agent:rf_source_valid -> openmac_0_macTimer_agent_rsp_fifo:in_valid
	wire         openmac_0_mactimer_agent_rf_source_startofpacket;                     // openmac_0_macTimer_agent:rf_source_startofpacket -> openmac_0_macTimer_agent_rsp_fifo:in_startofpacket
	wire  [89:0] openmac_0_mactimer_agent_rf_source_data;                              // openmac_0_macTimer_agent:rf_source_data -> openmac_0_macTimer_agent_rsp_fifo:in_data
	wire         openmac_0_mactimer_agent_rf_source_ready;                             // openmac_0_macTimer_agent_rsp_fifo:in_ready -> openmac_0_macTimer_agent:rf_source_ready
	wire         openmac_0_mactimer_agent_rsp_fifo_out_endofpacket;                    // openmac_0_macTimer_agent_rsp_fifo:out_endofpacket -> openmac_0_macTimer_agent:rf_sink_endofpacket
	wire         openmac_0_mactimer_agent_rsp_fifo_out_valid;                          // openmac_0_macTimer_agent_rsp_fifo:out_valid -> openmac_0_macTimer_agent:rf_sink_valid
	wire         openmac_0_mactimer_agent_rsp_fifo_out_startofpacket;                  // openmac_0_macTimer_agent_rsp_fifo:out_startofpacket -> openmac_0_macTimer_agent:rf_sink_startofpacket
	wire  [89:0] openmac_0_mactimer_agent_rsp_fifo_out_data;                           // openmac_0_macTimer_agent_rsp_fifo:out_data -> openmac_0_macTimer_agent:rf_sink_data
	wire         openmac_0_mactimer_agent_rsp_fifo_out_ready;                          // openmac_0_macTimer_agent:rf_sink_ready -> openmac_0_macTimer_agent_rsp_fifo:out_ready
	wire         openmac_0_mactimer_agent_rdata_fifo_src_valid;                        // openmac_0_macTimer_agent:rdata_fifo_src_valid -> openmac_0_macTimer_agent:rdata_fifo_sink_valid
	wire  [33:0] openmac_0_mactimer_agent_rdata_fifo_src_data;                         // openmac_0_macTimer_agent:rdata_fifo_src_data -> openmac_0_macTimer_agent:rdata_fifo_sink_data
	wire         openmac_0_mactimer_agent_rdata_fifo_src_ready;                        // openmac_0_macTimer_agent:rdata_fifo_sink_ready -> openmac_0_macTimer_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_endofpacket;                                          // cmd_mux_002:src_endofpacket -> openmac_0_macTimer_agent:cp_endofpacket
	wire         cmd_mux_002_src_valid;                                                // cmd_mux_002:src_valid -> openmac_0_macTimer_agent:cp_valid
	wire         cmd_mux_002_src_startofpacket;                                        // cmd_mux_002:src_startofpacket -> openmac_0_macTimer_agent:cp_startofpacket
	wire  [88:0] cmd_mux_002_src_data;                                                 // cmd_mux_002:src_data -> openmac_0_macTimer_agent:cp_data
	wire   [4:0] cmd_mux_002_src_channel;                                              // cmd_mux_002:src_channel -> openmac_0_macTimer_agent:cp_channel
	wire         cmd_mux_002_src_ready;                                                // openmac_0_macTimer_agent:cp_ready -> cmd_mux_002:src_ready
	wire         openmac_0_macreg_agent_m0_waitrequest;                                // openmac_0_macReg_translator:uav_waitrequest -> openmac_0_macReg_agent:m0_waitrequest
	wire   [1:0] openmac_0_macreg_agent_m0_burstcount;                                 // openmac_0_macReg_agent:m0_burstcount -> openmac_0_macReg_translator:uav_burstcount
	wire  [15:0] openmac_0_macreg_agent_m0_writedata;                                  // openmac_0_macReg_agent:m0_writedata -> openmac_0_macReg_translator:uav_writedata
	wire  [14:0] openmac_0_macreg_agent_m0_address;                                    // openmac_0_macReg_agent:m0_address -> openmac_0_macReg_translator:uav_address
	wire         openmac_0_macreg_agent_m0_write;                                      // openmac_0_macReg_agent:m0_write -> openmac_0_macReg_translator:uav_write
	wire         openmac_0_macreg_agent_m0_lock;                                       // openmac_0_macReg_agent:m0_lock -> openmac_0_macReg_translator:uav_lock
	wire         openmac_0_macreg_agent_m0_read;                                       // openmac_0_macReg_agent:m0_read -> openmac_0_macReg_translator:uav_read
	wire  [15:0] openmac_0_macreg_agent_m0_readdata;                                   // openmac_0_macReg_translator:uav_readdata -> openmac_0_macReg_agent:m0_readdata
	wire         openmac_0_macreg_agent_m0_readdatavalid;                              // openmac_0_macReg_translator:uav_readdatavalid -> openmac_0_macReg_agent:m0_readdatavalid
	wire         openmac_0_macreg_agent_m0_debugaccess;                                // openmac_0_macReg_agent:m0_debugaccess -> openmac_0_macReg_translator:uav_debugaccess
	wire   [1:0] openmac_0_macreg_agent_m0_byteenable;                                 // openmac_0_macReg_agent:m0_byteenable -> openmac_0_macReg_translator:uav_byteenable
	wire         openmac_0_macreg_agent_rf_source_endofpacket;                         // openmac_0_macReg_agent:rf_source_endofpacket -> openmac_0_macReg_agent_rsp_fifo:in_endofpacket
	wire         openmac_0_macreg_agent_rf_source_valid;                               // openmac_0_macReg_agent:rf_source_valid -> openmac_0_macReg_agent_rsp_fifo:in_valid
	wire         openmac_0_macreg_agent_rf_source_startofpacket;                       // openmac_0_macReg_agent:rf_source_startofpacket -> openmac_0_macReg_agent_rsp_fifo:in_startofpacket
	wire  [71:0] openmac_0_macreg_agent_rf_source_data;                                // openmac_0_macReg_agent:rf_source_data -> openmac_0_macReg_agent_rsp_fifo:in_data
	wire         openmac_0_macreg_agent_rf_source_ready;                               // openmac_0_macReg_agent_rsp_fifo:in_ready -> openmac_0_macReg_agent:rf_source_ready
	wire         openmac_0_macreg_agent_rsp_fifo_out_endofpacket;                      // openmac_0_macReg_agent_rsp_fifo:out_endofpacket -> openmac_0_macReg_agent:rf_sink_endofpacket
	wire         openmac_0_macreg_agent_rsp_fifo_out_valid;                            // openmac_0_macReg_agent_rsp_fifo:out_valid -> openmac_0_macReg_agent:rf_sink_valid
	wire         openmac_0_macreg_agent_rsp_fifo_out_startofpacket;                    // openmac_0_macReg_agent_rsp_fifo:out_startofpacket -> openmac_0_macReg_agent:rf_sink_startofpacket
	wire  [71:0] openmac_0_macreg_agent_rsp_fifo_out_data;                             // openmac_0_macReg_agent_rsp_fifo:out_data -> openmac_0_macReg_agent:rf_sink_data
	wire         openmac_0_macreg_agent_rsp_fifo_out_ready;                            // openmac_0_macReg_agent:rf_sink_ready -> openmac_0_macReg_agent_rsp_fifo:out_ready
	wire         openmac_0_macreg_agent_rdata_fifo_src_valid;                          // openmac_0_macReg_agent:rdata_fifo_src_valid -> openmac_0_macReg_agent:rdata_fifo_sink_valid
	wire  [17:0] openmac_0_macreg_agent_rdata_fifo_src_data;                           // openmac_0_macReg_agent:rdata_fifo_src_data -> openmac_0_macReg_agent:rdata_fifo_sink_data
	wire         openmac_0_macreg_agent_rdata_fifo_src_ready;                          // openmac_0_macReg_agent:rdata_fifo_sink_ready -> openmac_0_macReg_agent:rdata_fifo_src_ready
	wire         app_pio_s1_agent_m0_waitrequest;                                      // app_pio_s1_translator:uav_waitrequest -> app_pio_s1_agent:m0_waitrequest
	wire   [2:0] app_pio_s1_agent_m0_burstcount;                                       // app_pio_s1_agent:m0_burstcount -> app_pio_s1_translator:uav_burstcount
	wire  [31:0] app_pio_s1_agent_m0_writedata;                                        // app_pio_s1_agent:m0_writedata -> app_pio_s1_translator:uav_writedata
	wire  [14:0] app_pio_s1_agent_m0_address;                                          // app_pio_s1_agent:m0_address -> app_pio_s1_translator:uav_address
	wire         app_pio_s1_agent_m0_write;                                            // app_pio_s1_agent:m0_write -> app_pio_s1_translator:uav_write
	wire         app_pio_s1_agent_m0_lock;                                             // app_pio_s1_agent:m0_lock -> app_pio_s1_translator:uav_lock
	wire         app_pio_s1_agent_m0_read;                                             // app_pio_s1_agent:m0_read -> app_pio_s1_translator:uav_read
	wire  [31:0] app_pio_s1_agent_m0_readdata;                                         // app_pio_s1_translator:uav_readdata -> app_pio_s1_agent:m0_readdata
	wire         app_pio_s1_agent_m0_readdatavalid;                                    // app_pio_s1_translator:uav_readdatavalid -> app_pio_s1_agent:m0_readdatavalid
	wire         app_pio_s1_agent_m0_debugaccess;                                      // app_pio_s1_agent:m0_debugaccess -> app_pio_s1_translator:uav_debugaccess
	wire   [3:0] app_pio_s1_agent_m0_byteenable;                                       // app_pio_s1_agent:m0_byteenable -> app_pio_s1_translator:uav_byteenable
	wire         app_pio_s1_agent_rf_source_endofpacket;                               // app_pio_s1_agent:rf_source_endofpacket -> app_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         app_pio_s1_agent_rf_source_valid;                                     // app_pio_s1_agent:rf_source_valid -> app_pio_s1_agent_rsp_fifo:in_valid
	wire         app_pio_s1_agent_rf_source_startofpacket;                             // app_pio_s1_agent:rf_source_startofpacket -> app_pio_s1_agent_rsp_fifo:in_startofpacket
	wire  [89:0] app_pio_s1_agent_rf_source_data;                                      // app_pio_s1_agent:rf_source_data -> app_pio_s1_agent_rsp_fifo:in_data
	wire         app_pio_s1_agent_rf_source_ready;                                     // app_pio_s1_agent_rsp_fifo:in_ready -> app_pio_s1_agent:rf_source_ready
	wire         app_pio_s1_agent_rsp_fifo_out_endofpacket;                            // app_pio_s1_agent_rsp_fifo:out_endofpacket -> app_pio_s1_agent:rf_sink_endofpacket
	wire         app_pio_s1_agent_rsp_fifo_out_valid;                                  // app_pio_s1_agent_rsp_fifo:out_valid -> app_pio_s1_agent:rf_sink_valid
	wire         app_pio_s1_agent_rsp_fifo_out_startofpacket;                          // app_pio_s1_agent_rsp_fifo:out_startofpacket -> app_pio_s1_agent:rf_sink_startofpacket
	wire  [89:0] app_pio_s1_agent_rsp_fifo_out_data;                                   // app_pio_s1_agent_rsp_fifo:out_data -> app_pio_s1_agent:rf_sink_data
	wire         app_pio_s1_agent_rsp_fifo_out_ready;                                  // app_pio_s1_agent:rf_sink_ready -> app_pio_s1_agent_rsp_fifo:out_ready
	wire         app_pio_s1_agent_rdata_fifo_src_valid;                                // app_pio_s1_agent:rdata_fifo_src_valid -> app_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] app_pio_s1_agent_rdata_fifo_src_data;                                 // app_pio_s1_agent:rdata_fifo_src_data -> app_pio_s1_agent:rdata_fifo_sink_data
	wire         app_pio_s1_agent_rdata_fifo_src_ready;                                // app_pio_s1_agent:rdata_fifo_sink_ready -> app_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_endofpacket;                                          // cmd_mux_004:src_endofpacket -> app_pio_s1_agent:cp_endofpacket
	wire         cmd_mux_004_src_valid;                                                // cmd_mux_004:src_valid -> app_pio_s1_agent:cp_valid
	wire         cmd_mux_004_src_startofpacket;                                        // cmd_mux_004:src_startofpacket -> app_pio_s1_agent:cp_startofpacket
	wire  [88:0] cmd_mux_004_src_data;                                                 // cmd_mux_004:src_data -> app_pio_s1_agent:cp_data
	wire   [4:0] cmd_mux_004_src_channel;                                              // cmd_mux_004:src_channel -> app_pio_s1_agent:cp_channel
	wire         cmd_mux_004_src_ready;                                                // app_pio_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire         pcp_0_slow_bridge_agent_cp_endofpacket;                               // pcp_0_slow_bridge_agent:cp_endofpacket -> router:sink_endofpacket
	wire         pcp_0_slow_bridge_agent_cp_valid;                                     // pcp_0_slow_bridge_agent:cp_valid -> router:sink_valid
	wire         pcp_0_slow_bridge_agent_cp_startofpacket;                             // pcp_0_slow_bridge_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [88:0] pcp_0_slow_bridge_agent_cp_data;                                      // pcp_0_slow_bridge_agent:cp_data -> router:sink_data
	wire         pcp_0_slow_bridge_agent_cp_ready;                                     // router:sink_ready -> pcp_0_slow_bridge_agent:cp_ready
	wire         sysid_control_slave_agent_rp_endofpacket;                             // sysid_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         sysid_control_slave_agent_rp_valid;                                   // sysid_control_slave_agent:rp_valid -> router_001:sink_valid
	wire         sysid_control_slave_agent_rp_startofpacket;                           // sysid_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [88:0] sysid_control_slave_agent_rp_data;                                    // sysid_control_slave_agent:rp_data -> router_001:sink_data
	wire         sysid_control_slave_agent_rp_ready;                                   // router_001:sink_ready -> sysid_control_slave_agent:rp_ready
	wire         router_001_src_endofpacket;                                           // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_001_src_valid;                                                 // router_001:src_valid -> rsp_demux:sink_valid
	wire         router_001_src_startofpacket;                                         // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [88:0] router_001_src_data;                                                  // router_001:src_data -> rsp_demux:sink_data
	wire   [4:0] router_001_src_channel;                                               // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_ready;                                                 // rsp_demux:sink_ready -> router_001:src_ready
	wire         node_switch_pio_s1_agent_rp_endofpacket;                              // node_switch_pio_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         node_switch_pio_s1_agent_rp_valid;                                    // node_switch_pio_s1_agent:rp_valid -> router_002:sink_valid
	wire         node_switch_pio_s1_agent_rp_startofpacket;                            // node_switch_pio_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [88:0] node_switch_pio_s1_agent_rp_data;                                     // node_switch_pio_s1_agent:rp_data -> router_002:sink_data
	wire         node_switch_pio_s1_agent_rp_ready;                                    // router_002:sink_ready -> node_switch_pio_s1_agent:rp_ready
	wire         router_002_src_endofpacket;                                           // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_002_src_valid;                                                 // router_002:src_valid -> rsp_demux_001:sink_valid
	wire         router_002_src_startofpacket;                                         // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [88:0] router_002_src_data;                                                  // router_002:src_data -> rsp_demux_001:sink_data
	wire   [4:0] router_002_src_channel;                                               // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_ready;                                                 // rsp_demux_001:sink_ready -> router_002:src_ready
	wire         openmac_0_mactimer_agent_rp_endofpacket;                              // openmac_0_macTimer_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         openmac_0_mactimer_agent_rp_valid;                                    // openmac_0_macTimer_agent:rp_valid -> router_003:sink_valid
	wire         openmac_0_mactimer_agent_rp_startofpacket;                            // openmac_0_macTimer_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [88:0] openmac_0_mactimer_agent_rp_data;                                     // openmac_0_macTimer_agent:rp_data -> router_003:sink_data
	wire         openmac_0_mactimer_agent_rp_ready;                                    // router_003:sink_ready -> openmac_0_macTimer_agent:rp_ready
	wire         router_003_src_endofpacket;                                           // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_003_src_valid;                                                 // router_003:src_valid -> rsp_demux_002:sink_valid
	wire         router_003_src_startofpacket;                                         // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [88:0] router_003_src_data;                                                  // router_003:src_data -> rsp_demux_002:sink_data
	wire   [4:0] router_003_src_channel;                                               // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_ready;                                                 // rsp_demux_002:sink_ready -> router_003:src_ready
	wire         openmac_0_macreg_agent_rp_endofpacket;                                // openmac_0_macReg_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         openmac_0_macreg_agent_rp_valid;                                      // openmac_0_macReg_agent:rp_valid -> router_004:sink_valid
	wire         openmac_0_macreg_agent_rp_startofpacket;                              // openmac_0_macReg_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [70:0] openmac_0_macreg_agent_rp_data;                                       // openmac_0_macReg_agent:rp_data -> router_004:sink_data
	wire         openmac_0_macreg_agent_rp_ready;                                      // router_004:sink_ready -> openmac_0_macReg_agent:rp_ready
	wire         app_pio_s1_agent_rp_endofpacket;                                      // app_pio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         app_pio_s1_agent_rp_valid;                                            // app_pio_s1_agent:rp_valid -> router_005:sink_valid
	wire         app_pio_s1_agent_rp_startofpacket;                                    // app_pio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [88:0] app_pio_s1_agent_rp_data;                                             // app_pio_s1_agent:rp_data -> router_005:sink_data
	wire         app_pio_s1_agent_rp_ready;                                            // router_005:sink_ready -> app_pio_s1_agent:rp_ready
	wire         router_005_src_endofpacket;                                           // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_005_src_valid;                                                 // router_005:src_valid -> rsp_demux_004:sink_valid
	wire         router_005_src_startofpacket;                                         // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [88:0] router_005_src_data;                                                  // router_005:src_data -> rsp_demux_004:sink_data
	wire   [4:0] router_005_src_channel;                                               // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_ready;                                                 // rsp_demux_004:sink_ready -> router_005:src_ready
	wire         router_src_endofpacket;                                               // router:src_endofpacket -> pcp_0_slow_bridge_limiter:cmd_sink_endofpacket
	wire         router_src_valid;                                                     // router:src_valid -> pcp_0_slow_bridge_limiter:cmd_sink_valid
	wire         router_src_startofpacket;                                             // router:src_startofpacket -> pcp_0_slow_bridge_limiter:cmd_sink_startofpacket
	wire  [88:0] router_src_data;                                                      // router:src_data -> pcp_0_slow_bridge_limiter:cmd_sink_data
	wire   [4:0] router_src_channel;                                                   // router:src_channel -> pcp_0_slow_bridge_limiter:cmd_sink_channel
	wire         router_src_ready;                                                     // pcp_0_slow_bridge_limiter:cmd_sink_ready -> router:src_ready
	wire         pcp_0_slow_bridge_limiter_cmd_src_endofpacket;                        // pcp_0_slow_bridge_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         pcp_0_slow_bridge_limiter_cmd_src_startofpacket;                      // pcp_0_slow_bridge_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [88:0] pcp_0_slow_bridge_limiter_cmd_src_data;                               // pcp_0_slow_bridge_limiter:cmd_src_data -> cmd_demux:sink_data
	wire   [4:0] pcp_0_slow_bridge_limiter_cmd_src_channel;                            // pcp_0_slow_bridge_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         pcp_0_slow_bridge_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> pcp_0_slow_bridge_limiter:cmd_src_ready
	wire         rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> pcp_0_slow_bridge_limiter:rsp_sink_endofpacket
	wire         rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> pcp_0_slow_bridge_limiter:rsp_sink_valid
	wire         rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> pcp_0_slow_bridge_limiter:rsp_sink_startofpacket
	wire  [88:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> pcp_0_slow_bridge_limiter:rsp_sink_data
	wire   [4:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> pcp_0_slow_bridge_limiter:rsp_sink_channel
	wire         rsp_mux_src_ready;                                                    // pcp_0_slow_bridge_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire         pcp_0_slow_bridge_limiter_rsp_src_endofpacket;                        // pcp_0_slow_bridge_limiter:rsp_src_endofpacket -> pcp_0_slow_bridge_agent:rp_endofpacket
	wire         pcp_0_slow_bridge_limiter_rsp_src_valid;                              // pcp_0_slow_bridge_limiter:rsp_src_valid -> pcp_0_slow_bridge_agent:rp_valid
	wire         pcp_0_slow_bridge_limiter_rsp_src_startofpacket;                      // pcp_0_slow_bridge_limiter:rsp_src_startofpacket -> pcp_0_slow_bridge_agent:rp_startofpacket
	wire  [88:0] pcp_0_slow_bridge_limiter_rsp_src_data;                               // pcp_0_slow_bridge_limiter:rsp_src_data -> pcp_0_slow_bridge_agent:rp_data
	wire   [4:0] pcp_0_slow_bridge_limiter_rsp_src_channel;                            // pcp_0_slow_bridge_limiter:rsp_src_channel -> pcp_0_slow_bridge_agent:rp_channel
	wire         pcp_0_slow_bridge_limiter_rsp_src_ready;                              // pcp_0_slow_bridge_agent:rp_ready -> pcp_0_slow_bridge_limiter:rsp_src_ready
	wire         openmac_0_macreg_burst_adapter_source0_endofpacket;                   // openmac_0_macReg_burst_adapter:source0_endofpacket -> openmac_0_macReg_agent:cp_endofpacket
	wire         openmac_0_macreg_burst_adapter_source0_valid;                         // openmac_0_macReg_burst_adapter:source0_valid -> openmac_0_macReg_agent:cp_valid
	wire         openmac_0_macreg_burst_adapter_source0_startofpacket;                 // openmac_0_macReg_burst_adapter:source0_startofpacket -> openmac_0_macReg_agent:cp_startofpacket
	wire  [70:0] openmac_0_macreg_burst_adapter_source0_data;                          // openmac_0_macReg_burst_adapter:source0_data -> openmac_0_macReg_agent:cp_data
	wire         openmac_0_macreg_burst_adapter_source0_ready;                         // openmac_0_macReg_agent:cp_ready -> openmac_0_macReg_burst_adapter:source0_ready
	wire   [4:0] openmac_0_macreg_burst_adapter_source0_channel;                       // openmac_0_macReg_burst_adapter:source0_channel -> openmac_0_macReg_agent:cp_channel
	wire         cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [88:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [4:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire         cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [88:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire   [4:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_ready;                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire         cmd_demux_src2_endofpacket;                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire         cmd_demux_src2_startofpacket;                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [88:0] cmd_demux_src2_data;                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire   [4:0] cmd_demux_src2_channel;                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_ready;                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire         cmd_demux_src3_endofpacket;                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire         cmd_demux_src3_startofpacket;                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [88:0] cmd_demux_src3_data;                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire   [4:0] cmd_demux_src3_channel;                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_ready;                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire         cmd_demux_src4_endofpacket;                                           // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                 // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire         cmd_demux_src4_startofpacket;                                         // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [88:0] cmd_demux_src4_data;                                                  // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire   [4:0] cmd_demux_src4_channel;                                               // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_ready;                                                 // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire         rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [88:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [4:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire         rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire         rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [88:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire   [4:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_ready;                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire         rsp_demux_002_src0_endofpacket;                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src0_valid;                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire         rsp_demux_002_src0_startofpacket;                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [88:0] rsp_demux_002_src0_data;                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire   [4:0] rsp_demux_002_src0_channel;                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_ready;                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire         rsp_demux_003_src0_endofpacket;                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_003_src0_valid;                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire         rsp_demux_003_src0_startofpacket;                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [88:0] rsp_demux_003_src0_data;                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire   [4:0] rsp_demux_003_src0_channel;                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_ready;                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire         rsp_demux_004_src0_endofpacket;                                       // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_004_src0_valid;                                             // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire         rsp_demux_004_src0_startofpacket;                                     // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [88:0] rsp_demux_004_src0_data;                                              // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire   [4:0] rsp_demux_004_src0_channel;                                           // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_ready;                                             // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire         router_004_src_endofpacket;                                           // router_004:src_endofpacket -> openmac_0_macReg_rsp_width_adapter:in_endofpacket
	wire         router_004_src_valid;                                                 // router_004:src_valid -> openmac_0_macReg_rsp_width_adapter:in_valid
	wire         router_004_src_startofpacket;                                         // router_004:src_startofpacket -> openmac_0_macReg_rsp_width_adapter:in_startofpacket
	wire  [70:0] router_004_src_data;                                                  // router_004:src_data -> openmac_0_macReg_rsp_width_adapter:in_data
	wire   [4:0] router_004_src_channel;                                               // router_004:src_channel -> openmac_0_macReg_rsp_width_adapter:in_channel
	wire         router_004_src_ready;                                                 // openmac_0_macReg_rsp_width_adapter:in_ready -> router_004:src_ready
	wire         openmac_0_macreg_rsp_width_adapter_src_endofpacket;                   // openmac_0_macReg_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         openmac_0_macreg_rsp_width_adapter_src_valid;                         // openmac_0_macReg_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire         openmac_0_macreg_rsp_width_adapter_src_startofpacket;                 // openmac_0_macReg_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [88:0] openmac_0_macreg_rsp_width_adapter_src_data;                          // openmac_0_macReg_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire         openmac_0_macreg_rsp_width_adapter_src_ready;                         // rsp_demux_003:sink_ready -> openmac_0_macReg_rsp_width_adapter:out_ready
	wire   [4:0] openmac_0_macreg_rsp_width_adapter_src_channel;                       // openmac_0_macReg_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire         cmd_mux_003_src_endofpacket;                                          // cmd_mux_003:src_endofpacket -> openmac_0_macReg_cmd_width_adapter:in_endofpacket
	wire         cmd_mux_003_src_valid;                                                // cmd_mux_003:src_valid -> openmac_0_macReg_cmd_width_adapter:in_valid
	wire         cmd_mux_003_src_startofpacket;                                        // cmd_mux_003:src_startofpacket -> openmac_0_macReg_cmd_width_adapter:in_startofpacket
	wire  [88:0] cmd_mux_003_src_data;                                                 // cmd_mux_003:src_data -> openmac_0_macReg_cmd_width_adapter:in_data
	wire   [4:0] cmd_mux_003_src_channel;                                              // cmd_mux_003:src_channel -> openmac_0_macReg_cmd_width_adapter:in_channel
	wire         cmd_mux_003_src_ready;                                                // openmac_0_macReg_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire         openmac_0_macreg_cmd_width_adapter_src_endofpacket;                   // openmac_0_macReg_cmd_width_adapter:out_endofpacket -> openmac_0_macReg_burst_adapter:sink0_endofpacket
	wire         openmac_0_macreg_cmd_width_adapter_src_valid;                         // openmac_0_macReg_cmd_width_adapter:out_valid -> openmac_0_macReg_burst_adapter:sink0_valid
	wire         openmac_0_macreg_cmd_width_adapter_src_startofpacket;                 // openmac_0_macReg_cmd_width_adapter:out_startofpacket -> openmac_0_macReg_burst_adapter:sink0_startofpacket
	wire  [70:0] openmac_0_macreg_cmd_width_adapter_src_data;                          // openmac_0_macReg_cmd_width_adapter:out_data -> openmac_0_macReg_burst_adapter:sink0_data
	wire         openmac_0_macreg_cmd_width_adapter_src_ready;                         // openmac_0_macReg_burst_adapter:sink0_ready -> openmac_0_macReg_cmd_width_adapter:out_ready
	wire   [4:0] openmac_0_macreg_cmd_width_adapter_src_channel;                       // openmac_0_macReg_cmd_width_adapter:out_channel -> openmac_0_macReg_burst_adapter:sink0_channel
	wire   [4:0] pcp_0_slow_bridge_limiter_cmd_valid_data;                             // pcp_0_slow_bridge_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (15),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (15),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcp_0_slow_bridge_translator (
		.clk                      (clk50_clk_clk),                                                        //                       clk.clk
		.reset                    (sysid_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address              (pcp_0_slow_bridge_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcp_0_slow_bridge_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcp_0_slow_bridge_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcp_0_slow_bridge_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcp_0_slow_bridge_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcp_0_slow_bridge_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcp_0_slow_bridge_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcp_0_slow_bridge_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcp_0_slow_bridge_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcp_0_slow_bridge_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcp_0_slow_bridge_byteenable),                                         //                          .byteenable
		.av_read                  (pcp_0_slow_bridge_read),                                               //                          .read
		.av_readdata              (pcp_0_slow_bridge_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcp_0_slow_bridge_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcp_0_slow_bridge_write),                                              //                          .write
		.av_writedata             (pcp_0_slow_bridge_writedata),                                          //                          .writedata
		.av_debugaccess           (pcp_0_slow_bridge_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                      (clk50_clk_clk),                              //                      clk.clk
		.reset                    (sysid_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address              (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write                (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sysid_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata              (sysid_control_slave_readdata),               //                         .readdata
		.av_write                 (),                                           //              (terminated)
		.av_read                  (),                                           //              (terminated)
		.av_writedata             (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) node_switch_pio_s1_translator (
		.clk                      (clk50_clk_clk),                             //                      clk.clk
		.reset                    (sysid_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address              (node_switch_pio_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (node_switch_pio_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (node_switch_pio_s1_agent_m0_read),          //                         .read
		.uav_write                (node_switch_pio_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (node_switch_pio_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (node_switch_pio_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (node_switch_pio_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (node_switch_pio_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (node_switch_pio_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (node_switch_pio_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (node_switch_pio_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (node_switch_pio_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (node_switch_pio_s1_readdata),               //                         .readdata
		.av_write                 (),                                          //              (terminated)
		.av_read                  (),                                          //              (terminated)
		.av_writedata             (),                                          //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) openmac_0_mactimer_translator (
		.clk                      (clk50_clk_clk),                             //                      clk.clk
		.reset                    (sysid_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address              (openmac_0_mactimer_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (openmac_0_mactimer_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (openmac_0_mactimer_agent_m0_read),          //                         .read
		.uav_write                (openmac_0_mactimer_agent_m0_write),         //                         .write
		.uav_waitrequest          (openmac_0_mactimer_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (openmac_0_mactimer_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (openmac_0_mactimer_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (openmac_0_mactimer_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (openmac_0_mactimer_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (openmac_0_mactimer_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (openmac_0_mactimer_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (openmac_0_macTimer_address),                //      avalon_anti_slave_0.address
		.av_write                 (openmac_0_macTimer_write),                  //                         .write
		.av_read                  (openmac_0_macTimer_read),                   //                         .read
		.av_readdata              (openmac_0_macTimer_readdata),               //                         .readdata
		.av_writedata             (openmac_0_macTimer_writedata),              //                         .writedata
		.av_byteenable            (openmac_0_macTimer_byteenable),             //                         .byteenable
		.av_waitrequest           (openmac_0_macTimer_waitrequest),            //                         .waitrequest
		.av_chipselect            (openmac_0_macTimer_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) openmac_0_macreg_translator (
		.clk                      (clk50_clk_clk),                           //                      clk.clk
		.reset                    (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (openmac_0_macreg_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (openmac_0_macreg_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (openmac_0_macreg_agent_m0_read),          //                         .read
		.uav_write                (openmac_0_macreg_agent_m0_write),         //                         .write
		.uav_waitrequest          (openmac_0_macreg_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (openmac_0_macreg_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (openmac_0_macreg_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (openmac_0_macreg_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (openmac_0_macreg_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (openmac_0_macreg_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (openmac_0_macreg_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (openmac_0_macReg_address),                //      avalon_anti_slave_0.address
		.av_write                 (openmac_0_macReg_write),                  //                         .write
		.av_read                  (openmac_0_macReg_read),                   //                         .read
		.av_readdata              (openmac_0_macReg_readdata),               //                         .readdata
		.av_writedata             (openmac_0_macReg_writedata),              //                         .writedata
		.av_byteenable            (openmac_0_macReg_byteenable),             //                         .byteenable
		.av_waitrequest           (openmac_0_macReg_waitrequest),            //                         .waitrequest
		.av_chipselect            (openmac_0_macReg_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) app_pio_s1_translator (
		.clk                      (clk50_clk_clk),                           //                      clk.clk
		.reset                    (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (app_pio_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (app_pio_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (app_pio_s1_agent_m0_read),                //                         .read
		.uav_write                (app_pio_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (app_pio_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (app_pio_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (app_pio_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (app_pio_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (app_pio_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (app_pio_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (app_pio_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (app_pio_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (app_pio_s1_write),                        //                         .write
		.av_readdata              (app_pio_s1_readdata),                     //                         .readdata
		.av_writedata             (app_pio_s1_writedata),                    //                         .writedata
		.av_chipselect            (app_pio_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BEGIN_BURST           (68),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_TRANS_LOCK            (55),
		.PKT_TRANS_EXCLUSIVE       (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_THREAD_ID_H           (76),
		.PKT_THREAD_ID_L           (76),
		.PKT_CACHE_H               (83),
		.PKT_CACHE_L               (80),
		.PKT_DATA_SIDEBAND_H       (67),
		.PKT_DATA_SIDEBAND_L       (67),
		.PKT_QOS_H                 (69),
		.PKT_QOS_L                 (69),
		.PKT_ADDR_SIDEBAND_H       (66),
		.PKT_ADDR_SIDEBAND_L       (66),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_ORI_BURST_SIZE_H      (88),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcp_0_slow_bridge_agent (
		.clk                     (clk50_clk_clk),                                                        //       clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address              (pcp_0_slow_bridge_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pcp_0_slow_bridge_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pcp_0_slow_bridge_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pcp_0_slow_bridge_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pcp_0_slow_bridge_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pcp_0_slow_bridge_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pcp_0_slow_bridge_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pcp_0_slow_bridge_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pcp_0_slow_bridge_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pcp_0_slow_bridge_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pcp_0_slow_bridge_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pcp_0_slow_bridge_agent_cp_ready),                                     //          .ready
		.rp_valid                (pcp_0_slow_bridge_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (pcp_0_slow_bridge_limiter_rsp_src_data),                               //          .data
		.rp_channel              (pcp_0_slow_bridge_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (pcp_0_slow_bridge_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (pcp_0_slow_bridge_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (pcp_0_slow_bridge_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (68),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_TRANS_LOCK            (55),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_ORI_BURST_SIZE_H      (88),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_control_slave_agent (
		.clk                     (clk50_clk_clk),                                        //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                  //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                        //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (68),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_TRANS_LOCK            (55),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_ORI_BURST_SIZE_H      (88),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) node_switch_pio_s1_agent (
		.clk                     (clk50_clk_clk),                                       //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (node_switch_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (node_switch_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (node_switch_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (node_switch_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (node_switch_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (node_switch_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (node_switch_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (node_switch_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (node_switch_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (node_switch_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (node_switch_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (node_switch_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (node_switch_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (node_switch_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (node_switch_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (node_switch_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                             //                .channel
		.rf_sink_ready           (node_switch_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (node_switch_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (node_switch_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (node_switch_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (node_switch_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (node_switch_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (node_switch_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (node_switch_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (node_switch_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (node_switch_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (node_switch_pio_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (node_switch_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (node_switch_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (node_switch_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (node_switch_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (node_switch_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_switch_pio_s1_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                       //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (node_switch_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (node_switch_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (node_switch_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (node_switch_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (node_switch_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (node_switch_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (node_switch_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (node_switch_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (node_switch_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (node_switch_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (68),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_TRANS_LOCK            (55),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_ORI_BURST_SIZE_H      (88),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) openmac_0_mactimer_agent (
		.clk                     (clk50_clk_clk),                                       //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (openmac_0_mactimer_agent_m0_address),                 //              m0.address
		.m0_burstcount           (openmac_0_mactimer_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (openmac_0_mactimer_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (openmac_0_mactimer_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (openmac_0_mactimer_agent_m0_lock),                    //                .lock
		.m0_readdata             (openmac_0_mactimer_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (openmac_0_mactimer_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (openmac_0_mactimer_agent_m0_read),                    //                .read
		.m0_waitrequest          (openmac_0_mactimer_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (openmac_0_mactimer_agent_m0_writedata),               //                .writedata
		.m0_write                (openmac_0_mactimer_agent_m0_write),                   //                .write
		.rp_endofpacket          (openmac_0_mactimer_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (openmac_0_mactimer_agent_rp_ready),                   //                .ready
		.rp_valid                (openmac_0_mactimer_agent_rp_valid),                   //                .valid
		.rp_data                 (openmac_0_mactimer_agent_rp_data),                    //                .data
		.rp_startofpacket        (openmac_0_mactimer_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (openmac_0_mactimer_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (openmac_0_mactimer_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (openmac_0_mactimer_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (openmac_0_mactimer_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (openmac_0_mactimer_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (openmac_0_mactimer_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (openmac_0_mactimer_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (openmac_0_mactimer_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (openmac_0_mactimer_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (openmac_0_mactimer_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (openmac_0_mactimer_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (openmac_0_mactimer_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (openmac_0_mactimer_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (openmac_0_mactimer_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (openmac_0_mactimer_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (openmac_0_mactimer_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) openmac_0_mactimer_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                       //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (openmac_0_mactimer_agent_rf_source_data),             //        in.data
		.in_valid          (openmac_0_mactimer_agent_rf_source_valid),            //          .valid
		.in_ready          (openmac_0_mactimer_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (openmac_0_mactimer_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (openmac_0_mactimer_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (openmac_0_mactimer_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (openmac_0_mactimer_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (openmac_0_mactimer_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (openmac_0_mactimer_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (openmac_0_mactimer_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (50),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (32),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (33),
		.PKT_TRANS_POSTED          (34),
		.PKT_TRANS_WRITE           (35),
		.PKT_TRANS_READ            (36),
		.PKT_TRANS_LOCK            (37),
		.PKT_SRC_ID_H              (54),
		.PKT_SRC_ID_L              (52),
		.PKT_DEST_ID_H             (57),
		.PKT_DEST_ID_L             (55),
		.PKT_BURSTWRAP_H           (42),
		.PKT_BURSTWRAP_L           (42),
		.PKT_BYTE_CNT_H            (41),
		.PKT_BYTE_CNT_L            (39),
		.PKT_PROTECTION_H          (61),
		.PKT_PROTECTION_L          (59),
		.PKT_RESPONSE_STATUS_H     (67),
		.PKT_RESPONSE_STATUS_L     (66),
		.PKT_BURST_SIZE_H          (45),
		.PKT_BURST_SIZE_L          (43),
		.PKT_ORI_BURST_SIZE_L      (68),
		.PKT_ORI_BURST_SIZE_H      (70),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (71),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) openmac_0_macreg_agent (
		.clk                     (clk50_clk_clk),                                        //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (openmac_0_macreg_agent_m0_address),                    //              m0.address
		.m0_burstcount           (openmac_0_macreg_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (openmac_0_macreg_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (openmac_0_macreg_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (openmac_0_macreg_agent_m0_lock),                       //                .lock
		.m0_readdata             (openmac_0_macreg_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (openmac_0_macreg_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (openmac_0_macreg_agent_m0_read),                       //                .read
		.m0_waitrequest          (openmac_0_macreg_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (openmac_0_macreg_agent_m0_writedata),                  //                .writedata
		.m0_write                (openmac_0_macreg_agent_m0_write),                      //                .write
		.rp_endofpacket          (openmac_0_macreg_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (openmac_0_macreg_agent_rp_ready),                      //                .ready
		.rp_valid                (openmac_0_macreg_agent_rp_valid),                      //                .valid
		.rp_data                 (openmac_0_macreg_agent_rp_data),                       //                .data
		.rp_startofpacket        (openmac_0_macreg_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (openmac_0_macreg_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (openmac_0_macreg_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (openmac_0_macreg_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (openmac_0_macreg_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (openmac_0_macreg_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (openmac_0_macreg_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (openmac_0_macreg_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (openmac_0_macreg_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (openmac_0_macreg_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (openmac_0_macreg_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (openmac_0_macreg_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (openmac_0_macreg_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (openmac_0_macreg_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (openmac_0_macreg_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (openmac_0_macreg_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (openmac_0_macreg_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (openmac_0_macreg_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (openmac_0_macreg_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (openmac_0_macreg_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (openmac_0_macreg_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (openmac_0_macreg_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (openmac_0_macreg_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (72),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) openmac_0_macreg_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                     //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (openmac_0_macreg_agent_rf_source_data),             //        in.data
		.in_valid          (openmac_0_macreg_agent_rf_source_valid),            //          .valid
		.in_ready          (openmac_0_macreg_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (openmac_0_macreg_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (openmac_0_macreg_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (openmac_0_macreg_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (openmac_0_macreg_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (openmac_0_macreg_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (openmac_0_macreg_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (openmac_0_macreg_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (68),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_TRANS_LOCK            (55),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_ORI_BURST_SIZE_H      (88),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) app_pio_s1_agent (
		.clk                     (clk50_clk_clk),                               //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (app_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (app_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (app_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (app_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (app_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (app_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (app_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (app_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (app_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (app_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (app_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (app_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (app_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (app_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (app_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (app_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_004_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                     //                .channel
		.rf_sink_ready           (app_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (app_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (app_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (app_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (app_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (app_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (app_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (app_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (app_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (app_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (app_pio_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (app_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (app_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (app_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (app_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (app_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) app_pio_s1_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                               //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (app_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (app_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (app_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (app_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (app_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (app_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (app_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (app_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (app_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (app_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (pcp_0_slow_bridge_agent_cp_ready),         //      sink.ready
		.sink_valid         (pcp_0_slow_bridge_agent_cp_valid),         //          .valid
		.sink_data          (pcp_0_slow_bridge_agent_cp_data),          //          .data
		.sink_startofpacket (pcp_0_slow_bridge_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pcp_0_slow_bridge_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk50_clk_clk),                            //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                         //       src.ready
		.src_valid          (router_src_valid),                         //          .valid
		.src_data           (router_src_data),                          //          .data
		.src_channel        (router_src_channel),                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk50_clk_clk),                              //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_001_src_ready),                       //       src.ready
		.src_valid          (router_001_src_valid),                       //          .valid
		.src_data           (router_001_src_data),                        //          .data
		.src_channel        (router_001_src_channel),                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (node_switch_pio_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (node_switch_pio_s1_agent_rp_valid),         //          .valid
		.sink_data          (node_switch_pio_s1_agent_rp_data),          //          .data
		.sink_startofpacket (node_switch_pio_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (node_switch_pio_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk50_clk_clk),                             //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_002_src_ready),                      //       src.ready
		.src_valid          (router_002_src_valid),                      //          .valid
		.src_data           (router_002_src_data),                       //          .data
		.src_channel        (router_002_src_channel),                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (openmac_0_mactimer_agent_rp_ready),         //      sink.ready
		.sink_valid         (openmac_0_mactimer_agent_rp_valid),         //          .valid
		.sink_data          (openmac_0_mactimer_agent_rp_data),          //          .data
		.sink_startofpacket (openmac_0_mactimer_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (openmac_0_mactimer_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk50_clk_clk),                             //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_003_src_ready),                      //       src.ready
		.src_valid          (router_003_src_valid),                      //          .valid
		.src_data           (router_003_src_data),                       //          .data
		.src_channel        (router_003_src_channel),                    //          .channel
		.src_startofpacket  (router_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (openmac_0_macreg_agent_rp_ready),         //      sink.ready
		.sink_valid         (openmac_0_macreg_agent_rp_valid),         //          .valid
		.sink_data          (openmac_0_macreg_agent_rp_data),          //          .data
		.sink_startofpacket (openmac_0_macreg_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (openmac_0_macreg_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk50_clk_clk),                           //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                    //       src.ready
		.src_valid          (router_004_src_valid),                    //          .valid
		.src_data           (router_004_src_data),                     //          .data
		.src_channel        (router_004_src_channel),                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (app_pio_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (app_pio_s1_agent_rp_valid),               //          .valid
		.sink_data          (app_pio_s1_agent_rp_data),                //          .data
		.sink_startofpacket (app_pio_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (app_pio_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk50_clk_clk),                           //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                    //       src.ready
		.src_valid          (router_005_src_valid),                    //          .valid
		.src_data           (router_005_src_data),                     //          .data
		.src_channel        (router_005_src_channel),                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) pcp_0_slow_bridge_limiter (
		.clk                    (clk50_clk_clk),                                   //       clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                //          .valid
		.cmd_sink_data          (router_src_data),                                 //          .data
		.cmd_sink_channel       (router_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (pcp_0_slow_bridge_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (pcp_0_slow_bridge_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (pcp_0_slow_bridge_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (pcp_0_slow_bridge_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (pcp_0_slow_bridge_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (pcp_0_slow_bridge_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (pcp_0_slow_bridge_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (pcp_0_slow_bridge_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (pcp_0_slow_bridge_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (pcp_0_slow_bridge_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (pcp_0_slow_bridge_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (pcp_0_slow_bridge_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (32),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (50),
		.PKT_BYTE_CNT_H            (41),
		.PKT_BYTE_CNT_L            (39),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (45),
		.PKT_BURST_SIZE_L          (43),
		.PKT_BURST_TYPE_H          (47),
		.PKT_BURST_TYPE_L          (46),
		.PKT_BURSTWRAP_H           (42),
		.PKT_BURSTWRAP_L           (42),
		.PKT_TRANS_COMPRESSED_READ (33),
		.PKT_TRANS_WRITE           (35),
		.PKT_TRANS_READ            (36),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (71),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (40),
		.OUT_BURSTWRAP_H           (42),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) openmac_0_macreg_burst_adapter (
		.clk                   (clk50_clk_clk),                                        //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (openmac_0_macreg_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (openmac_0_macreg_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (openmac_0_macreg_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (openmac_0_macreg_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (openmac_0_macreg_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (openmac_0_macreg_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (openmac_0_macreg_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (openmac_0_macreg_burst_adapter_source0_data),          //          .data
		.source0_channel       (openmac_0_macreg_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (openmac_0_macreg_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (openmac_0_macreg_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (openmac_0_macreg_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk50_clk_clk),                                   //        clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (pcp_0_slow_bridge_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (pcp_0_slow_bridge_limiter_cmd_src_channel),       //           .channel
		.sink_data          (pcp_0_slow_bridge_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (pcp_0_slow_bridge_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (pcp_0_slow_bridge_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (pcp_0_slow_bridge_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //           .valid
		.src0_data          (cmd_demux_src0_data),                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                            //           .valid
		.src1_data          (cmd_demux_src1_data),                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                      //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                            //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                            //           .valid
		.src2_data          (cmd_demux_src2_data),                             //           .data
		.src2_channel       (cmd_demux_src2_channel),                          //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                      //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                            //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                            //           .valid
		.src3_data          (cmd_demux_src3_data),                             //           .data
		.src3_channel       (cmd_demux_src3_channel),                          //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                      //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                            //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                            //           .valid
		.src4_data          (cmd_demux_src4_data),                             //           .data
		.src4_channel       (cmd_demux_src4_channel),                          //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                       //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk50_clk_clk),                           //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk50_clk_clk),                           //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk50_clk_clk),                           //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk50_clk_clk),                           //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk50_clk_clk),                           //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                  //          .channel
		.sink0_data          (cmd_demux_src4_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk50_clk_clk),                           //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                    //      sink.ready
		.sink_channel       (router_001_src_channel),                  //          .channel
		.sink_data          (router_001_src_data),                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_001_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk50_clk_clk),                           //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk50_clk_clk),                           //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk50_clk_clk),                                        //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.sink_ready         (openmac_0_macreg_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (openmac_0_macreg_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (openmac_0_macreg_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (openmac_0_macreg_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (openmac_0_macreg_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (openmac_0_macreg_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_003_src0_data),                              //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk50_clk_clk),                           //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk50_clk_clk),                           //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),              //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                 //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),              //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                 //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),              //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                 //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (32),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (41),
		.IN_PKT_BYTE_CNT_L             (39),
		.IN_PKT_TRANS_COMPRESSED_READ  (33),
		.IN_PKT_BURSTWRAP_H            (42),
		.IN_PKT_BURSTWRAP_L            (42),
		.IN_PKT_BURST_SIZE_H           (45),
		.IN_PKT_BURST_SIZE_L           (43),
		.IN_PKT_RESPONSE_STATUS_H      (67),
		.IN_PKT_RESPONSE_STATUS_L      (66),
		.IN_PKT_TRANS_EXCLUSIVE        (38),
		.IN_PKT_BURST_TYPE_H           (47),
		.IN_PKT_BURST_TYPE_L           (46),
		.IN_PKT_ORI_BURST_SIZE_L       (68),
		.IN_PKT_ORI_BURST_SIZE_H       (70),
		.IN_ST_DATA_W                  (71),
		.OUT_PKT_ADDR_H                (50),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (57),
		.OUT_PKT_TRANS_COMPRESSED_READ (51),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (56),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) openmac_0_macreg_rsp_width_adapter (
		.clk                  (clk50_clk_clk),                                        //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (router_004_src_valid),                                 //      sink.valid
		.in_channel           (router_004_src_channel),                               //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                           //          .endofpacket
		.in_ready             (router_004_src_ready),                                 //          .ready
		.in_data              (router_004_src_data),                                  //          .data
		.out_endofpacket      (openmac_0_macreg_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (openmac_0_macreg_rsp_width_adapter_src_data),          //          .data
		.out_channel          (openmac_0_macreg_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (openmac_0_macreg_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (openmac_0_macreg_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (openmac_0_macreg_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (50),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (57),
		.IN_PKT_TRANS_COMPRESSED_READ  (51),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (56),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (32),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (41),
		.OUT_PKT_BYTE_CNT_L            (39),
		.OUT_PKT_TRANS_COMPRESSED_READ (33),
		.OUT_PKT_BURST_SIZE_H          (45),
		.OUT_PKT_BURST_SIZE_L          (43),
		.OUT_PKT_RESPONSE_STATUS_H     (67),
		.OUT_PKT_RESPONSE_STATUS_L     (66),
		.OUT_PKT_TRANS_EXCLUSIVE       (38),
		.OUT_PKT_BURST_TYPE_H          (47),
		.OUT_PKT_BURST_TYPE_L          (46),
		.OUT_PKT_ORI_BURST_SIZE_L      (68),
		.OUT_PKT_ORI_BURST_SIZE_H      (70),
		.OUT_ST_DATA_W                 (71),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) openmac_0_macreg_cmd_width_adapter (
		.clk                  (clk50_clk_clk),                                        //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                              //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                          //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                //          .ready
		.in_data              (cmd_mux_003_src_data),                                 //          .data
		.out_endofpacket      (openmac_0_macreg_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (openmac_0_macreg_cmd_width_adapter_src_data),          //          .data
		.out_channel          (openmac_0_macreg_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (openmac_0_macreg_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (openmac_0_macreg_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (openmac_0_macreg_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

endmodule
