// soc_system_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2017.06.23.22:38:09

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_3 (
		input  wire        clk_50_clk_clk,                                                       //                                                     clk_50_clk.clk
		input  wire        address_span_extender_flash_bridge_reset_reset_bridge_in_reset_reset, // address_span_extender_flash_bridge_reset_reset_bridge_in_reset.reset
		input  wire        pcp_0_rst_clk100_reset_bridge_in_reset_reset,                         //                         pcp_0_rst_clk100_reset_bridge_in_reset.reset
		input  wire [21:0] pcp_0_flash_bridge_address,                                           //                                             pcp_0_flash_bridge.address
		output wire        pcp_0_flash_bridge_waitrequest,                                       //                                                               .waitrequest
		input  wire [0:0]  pcp_0_flash_bridge_burstcount,                                        //                                                               .burstcount
		input  wire [3:0]  pcp_0_flash_bridge_byteenable,                                        //                                                               .byteenable
		input  wire        pcp_0_flash_bridge_read,                                              //                                                               .read
		output wire [31:0] pcp_0_flash_bridge_readdata,                                          //                                                               .readdata
		output wire        pcp_0_flash_bridge_readdatavalid,                                     //                                                               .readdatavalid
		input  wire        pcp_0_flash_bridge_write,                                             //                                                               .write
		input  wire [31:0] pcp_0_flash_bridge_writedata,                                         //                                                               .writedata
		input  wire        pcp_0_flash_bridge_debugaccess,                                       //                                                               .debugaccess
		output wire [19:0] address_span_extender_flash_bridge_windowed_slave_address,            //              address_span_extender_flash_bridge_windowed_slave.address
		output wire        address_span_extender_flash_bridge_windowed_slave_write,              //                                                               .write
		output wire        address_span_extender_flash_bridge_windowed_slave_read,               //                                                               .read
		input  wire [31:0] address_span_extender_flash_bridge_windowed_slave_readdata,           //                                                               .readdata
		output wire [31:0] address_span_extender_flash_bridge_windowed_slave_writedata,          //                                                               .writedata
		output wire [0:0]  address_span_extender_flash_bridge_windowed_slave_burstcount,         //                                                               .burstcount
		output wire [3:0]  address_span_extender_flash_bridge_windowed_slave_byteenable,         //                                                               .byteenable
		input  wire        address_span_extender_flash_bridge_windowed_slave_readdatavalid,      //                                                               .readdatavalid
		input  wire        address_span_extender_flash_bridge_windowed_slave_waitrequest         //                                                               .waitrequest
	);

	wire         pcp_0_flash_bridge_translator_avalon_universal_master_0_waitrequest;   // address_span_extender_flash_bridge_windowed_slave_translator:uav_waitrequest -> pcp_0_flash_bridge_translator:uav_waitrequest
	wire   [2:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_burstcount;    // pcp_0_flash_bridge_translator:uav_burstcount -> address_span_extender_flash_bridge_windowed_slave_translator:uav_burstcount
	wire  [31:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_writedata;     // pcp_0_flash_bridge_translator:uav_writedata -> address_span_extender_flash_bridge_windowed_slave_translator:uav_writedata
	wire  [21:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_address;       // pcp_0_flash_bridge_translator:uav_address -> address_span_extender_flash_bridge_windowed_slave_translator:uav_address
	wire         pcp_0_flash_bridge_translator_avalon_universal_master_0_lock;          // pcp_0_flash_bridge_translator:uav_lock -> address_span_extender_flash_bridge_windowed_slave_translator:uav_lock
	wire         pcp_0_flash_bridge_translator_avalon_universal_master_0_write;         // pcp_0_flash_bridge_translator:uav_write -> address_span_extender_flash_bridge_windowed_slave_translator:uav_write
	wire         pcp_0_flash_bridge_translator_avalon_universal_master_0_read;          // pcp_0_flash_bridge_translator:uav_read -> address_span_extender_flash_bridge_windowed_slave_translator:uav_read
	wire  [31:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_readdata;      // address_span_extender_flash_bridge_windowed_slave_translator:uav_readdata -> pcp_0_flash_bridge_translator:uav_readdata
	wire         pcp_0_flash_bridge_translator_avalon_universal_master_0_debugaccess;   // pcp_0_flash_bridge_translator:uav_debugaccess -> address_span_extender_flash_bridge_windowed_slave_translator:uav_debugaccess
	wire   [3:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_byteenable;    // pcp_0_flash_bridge_translator:uav_byteenable -> address_span_extender_flash_bridge_windowed_slave_translator:uav_byteenable
	wire         pcp_0_flash_bridge_translator_avalon_universal_master_0_readdatavalid; // address_span_extender_flash_bridge_windowed_slave_translator:uav_readdatavalid -> pcp_0_flash_bridge_translator:uav_readdatavalid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (22),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcp_0_flash_bridge_translator (
		.clk                      (clk_50_clk_clk),                                                        //                       clk.clk
		.reset                    (address_span_extender_flash_bridge_reset_reset_bridge_in_reset_reset),  //                     reset.reset
		.uav_address              (pcp_0_flash_bridge_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcp_0_flash_bridge_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcp_0_flash_bridge_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcp_0_flash_bridge_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcp_0_flash_bridge_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcp_0_flash_bridge_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcp_0_flash_bridge_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcp_0_flash_bridge_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcp_0_flash_bridge_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcp_0_flash_bridge_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcp_0_flash_bridge_byteenable),                                         //                          .byteenable
		.av_read                  (pcp_0_flash_bridge_read),                                               //                          .read
		.av_readdata              (pcp_0_flash_bridge_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcp_0_flash_bridge_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcp_0_flash_bridge_write),                                              //                          .write
		.av_writedata             (pcp_0_flash_bridge_writedata),                                          //                          .writedata
		.av_debugaccess           (pcp_0_flash_bridge_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                  //               (terminated)
		.av_begintransfer         (1'b0),                                                                  //               (terminated)
		.av_chipselect            (1'b0),                                                                  //               (terminated)
		.av_lock                  (1'b0),                                                                  //               (terminated)
		.uav_clken                (),                                                                      //               (terminated)
		.av_clken                 (1'b1),                                                                  //               (terminated)
		.uav_response             (2'b00),                                                                 //               (terminated)
		.av_response              (),                                                                      //               (terminated)
		.uav_writeresponserequest (),                                                                      //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                  //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid    ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (22),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) address_span_extender_flash_bridge_windowed_slave_translator (
		.clk                      (clk_50_clk_clk),                                                        //                      clk.clk
		.reset                    (address_span_extender_flash_bridge_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (pcp_0_flash_bridge_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (pcp_0_flash_bridge_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write                (pcp_0_flash_bridge_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest          (pcp_0_flash_bridge_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (pcp_0_flash_bridge_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata             (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata            (pcp_0_flash_bridge_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess          (pcp_0_flash_bridge_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address               (address_span_extender_flash_bridge_windowed_slave_address),             //      avalon_anti_slave_0.address
		.av_write                 (address_span_extender_flash_bridge_windowed_slave_write),               //                         .write
		.av_read                  (address_span_extender_flash_bridge_windowed_slave_read),                //                         .read
		.av_readdata              (address_span_extender_flash_bridge_windowed_slave_readdata),            //                         .readdata
		.av_writedata             (address_span_extender_flash_bridge_windowed_slave_writedata),           //                         .writedata
		.av_burstcount            (address_span_extender_flash_bridge_windowed_slave_burstcount),          //                         .burstcount
		.av_byteenable            (address_span_extender_flash_bridge_windowed_slave_byteenable),          //                         .byteenable
		.av_readdatavalid         (address_span_extender_flash_bridge_windowed_slave_readdatavalid),       //                         .readdatavalid
		.av_waitrequest           (address_span_extender_flash_bridge_windowed_slave_waitrequest),         //                         .waitrequest
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_chipselect            (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

endmodule
